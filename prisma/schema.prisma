// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.text annotations in model Account below
    // Further reading: 
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model User {
    id              String    @id @default(cuid())
    name            String?
    password        String?
    profilePicture  String?
    nacionalitty    String?
    document        String?
    email           String?   @unique
    phone           String?
    role            String    @default("user")
    Order           Order[]
    Cart            Cart[]
    Adress          Adress[]
    activeAdressId  String?
    activePaymentId String?
    Payment         Payment[]
}

model Product {
    id    String  @id @default(cuid())
    name  String
    color String? @default("#383838")
    price Float

    descEditorId String?
    description  Editor? @relation(fields: [descEditorId], references: [id], name: "description")

    detEditorId String?
    details     Editor? @relation(fields: [detEditorId], references: [id], name: "details")

    images Image[]
    order  Order[]
    Cart   Cart[]
}

model Editor {
    id   String @id @default(cuid())
    json String
    html String

    DescriptionProduct Product[]      @relation(name: "description")
    DetailsProduct     Product[]      @relation(name: "details")
    Announcement       Announcement[]
}

model Image {
    id      String @id @default(cuid())
    default String
    small   String
    medium  String
    large   String

    product Product[]
    banner  Banner[]
}

model Alert {
    id    String @id @default(cuid())
    type  String @default("info")
    title String
}

model Banner {
    id String @id @default(cuid())

    image   Image  @relation(fields: [imageId], references: [id])
    imageId String
}

model Order {
    id     String @id @default(cuid())
    status String

    user   User   @relation(fields: [userId], references: [id])
    userId String

    adress   Adress @relation(fields: [adressId], references: [id])
    adressId String

    payment   Payment @relation(fields: [paymentId], references: [id])
    paymentId String

    product Product[]
}

model Adress {
    id           String @id @default(cuid())
    cep          Int
    state        String
    city         String
    neighborhood String
    street       String
    number       Int

    user   User    @relation(fields: [userId], references: [id])
    userId String
    Order  Order[]
}

model Payment {
    id        String  @id @default(cuid())
    number    String?
    name      String?
    validDate String?
    cvc       Int?
    orders    Order[]

    user   User   @relation(fields: [userId], references: [id])
    userId String
}

model Cart {
    id String @id @default(cuid())

    product   Product @relation(fields: [productId], references: [id])
    productId String

    user   User   @relation(fields: [userId], references: [id])
    userId String
}

model Announcement {
    id String @id @default(cuid())

    title String
    type  String

    description Editor @relation(fields: [editorId], references: [id])
    editorId    String
}
